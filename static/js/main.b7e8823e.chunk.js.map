{"version":3,"sources":["components/Header.js","components/NavBar.js","components/ImageDiv.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","NavBar","score","topScore","ImageDiv","props","role","aria-label","id","onClick","handleClick","style","backgroundImage","image","App","state","data","currentScore","handleCorrectGuess","newData","newScore","newTopScore","Math","max","setState","shuffleData","handleIncorrectGuess","resetData","map","item","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","this","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAYeA,EAVA,WACX,OACI,4BAAQC,UAAU,UACd,4CACA,qEACA,uFCYGC,MAhBf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,OACI,6BACI,yBAAKH,UAAU,UACX,4BACI,gDACA,uDACA,sCAAYE,EAAZ,iBAAiCC,OCetCC,MAvBf,SAAmBC,GAEf,OACI,oCACI,yBACAC,KAAK,QACLC,aAAW,aACXP,UAAU,aACVQ,GAAIH,EAAMG,GACVC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMG,KACvCG,MAAO,CAACC,gBAAgB,OAAD,OAASP,EAAMQ,MAAf,U,okBCqFpBC,E,2MAxFbC,MAAQ,CACNC,OACAC,aAAc,EACdd,SAAU,G,EAOZe,mBAAqB,SAAAC,GAAY,IAAD,EACK,EAAKJ,MAAhCZ,EADsB,EACtBA,SACFiB,EAFwB,EACZH,aACc,EAC1BI,EAAcC,KAAKC,IAAIH,EAAUjB,GAEvC,EAAKqB,SAAS,CACZR,KAAM,EAAKS,YAAYN,GACvBF,aAAcG,EACdjB,SAAUkB,K,EAIdK,qBAAuB,SAAAV,GACrB,EAAKQ,SAAS,CACZR,KAAM,EAAKW,UAAUX,GACrBC,aAAc,K,EAIlBU,UAAY,SAAAX,GACV,IAAMW,EAAYX,EAAKY,KAAI,SAAAC,GAAI,YAAUA,EAAV,CAAgBC,SAAS,OACxD,OAAO,EAAKL,YAAYE,I,EAG1BF,YAAc,SAAAT,GAEZ,IADA,IAAIe,EAAIf,EAAKgB,OAAS,EACfD,EAAI,GAAG,CACZ,IAAME,EAAIX,KAAKY,MAAMZ,KAAKa,UAAYJ,EAAI,IACpCK,EAAOpB,EAAKe,GAClBf,EAAKe,GAAKf,EAAKiB,GACfjB,EAAKiB,GAAKG,EACVL,IAEF,OAAOf,G,EAGTqB,gBAAkB,SAAA7B,GAChB,IAAI8B,GAAmB,EACjBnB,EAAU,EAAKJ,MAAMC,KAAKY,KAAI,SAAAC,GAClC,IAAMU,EAAO,KAAQV,GAOrB,OANIU,EAAQ/B,KAAOA,IACZ+B,EAAQT,UACXS,EAAQT,SAAU,EAClBQ,GAAmB,IAGhBC,KAETD,EACI,EAAKpB,mBAAmBC,GACxB,EAAKO,qBAAqBP,I,mFArD9BqB,KAAKhB,SAAS,CAAER,KAAMwB,KAAKf,YAAYe,KAAKzB,MAAMC,U,+BAyD1C,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CACEd,MAAOsC,KAAKzB,MAAME,aAClBd,SAAUqC,KAAKzB,MAAMZ,WAEvB,kBAAC,EAAD,MACA,0BAAMH,UAAU,aACbwC,KAAKzB,MAAMC,KAAKY,KAAI,SAAAa,GAAS,OAC5B,kBAAC,EAAD,CACEC,IAAKD,EAAUjC,GACfA,GAAIiC,EAAUjC,GACdE,YAAa,EAAK2B,gBAClBxB,MAAO4B,EAAU5B,iB,GA/Eb8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b7e8823e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Clicky Game!</h1>\r\n            <h2>Click on the pictures to earn points!</h2>\r\n            <h2>But be careful each picture can only be clicked once!</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\n\r\nfunction NavBar ({ score, topScore }) {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar\">\r\n                <ul>\r\n                    <li>Stranger Clicks!</li>\r\n                    <li>Click an Image to Begin</li>\r\n                    <li>Score: {score} | Top Score: {topScore}</li>\r\n                </ul>\r\n            </nav>            \r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default NavBar;","import React from \"react\";\r\n\r\nfunction ImageDiv (props) {\r\n    \r\n    return (\r\n        <>\r\n            <div \r\n            role=\"image\" \r\n            aria-label=\"click item\" \r\n            className=\"click-item\"\r\n            id={props.id}\r\n            onClick={() => props.handleClick(props.id)}\r\n            style={{backgroundImage: `url(${props.image})`}}          \r\n            >\r\n\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n    \r\n\r\n\r\nexport default ImageDiv;\r\n","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport NavBar from \"./components/NavBar\";\nimport ImageDiv from \"./components/ImageDiv\";\nimport data from \"./data.json\"\n\n\n\nclass App extends Component {\n  state = {\n    data,\n    currentScore: 0,\n    topScore: 0\n  }\n  \n  componentDidMount() {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  }\n\n  handleCorrectGuess = newData => {\n    const { topScore, currentScore } = this.state;\n    const newScore = currentScore + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffleData(newData),\n      currentScore: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      data: this.resetData(data),\n      currentScore: 0\n    });\n  };\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handleIncorrectGuess(newData);\n  };\n\n\n  render() {\n    return (\n      <>\n        <NavBar \n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Header />\n        <main className=\"container\">\n          {this.state.data.map(character => (\n            <ImageDiv\n              key={character.id}\n              id={character.id}\n              handleClick={this.handleItemClick}\n              image={character.image}\n            />\n          ))}\n        </main>      \n      </>\n    )\n\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}